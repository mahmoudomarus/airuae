generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id
  email        String     @unique
  password     String?    @map("passwordHash")
  firstName    String?
  lastName     String?
  profileImage String?
  phone        String?
  isVerified   Boolean    @default(false)
  role         UserRole   @default(USER)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime

  // Optional Stripe Customer ID
  stripeCustomerId String?

  // Relations
  properties     Property[]      @relation("PropertyOwner")
  bookings       Booking[]       @relation("BookingUser")
  sentMessages   Message[]       @relation("MessageSender")
  conversations  Conversation[]  @relation("ConversationParticipants")
  agencyMembers  User[]          @relation("AgencyMembers")
  agency         User?           @relation("AgencyMembers", fields: [agencyId], references: [id])
  agencyId       String?

  @@map("User")
}

enum UserRole {
  USER
  AGENT
  LANDLORD
  ADMIN

  @@map("UserRole")
}

model Property {
  id          String   @id
  title       String
  description String?
  address     String
  city        String
  country     String
  zipCode     String?
  price       Float
  bedrooms    Int
  bathrooms   Int
  size        Float?
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  // Geo location
  latitude  Float?
  longitude Float?

  // Owner (One-to-Many relation)
  owner   User   @relation("PropertyOwner", fields: [ownerId], references: [id])
  ownerId String

  // Arrays
  images    String[]
  amenities String[]

  // Relations
  bookings      Booking[]      @relation("PropertyBookings")
  conversations Conversation[] @relation("PropertyConversations")

  @@map("Property")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED

  @@map("BookingStatus")
}

model Booking {
  id         String        @id
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  nights     Int
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime

  // Payment information
  paymentIntentId String?
  paymentStatus   String?
  paymentMethod   String?
  isPaid          Boolean  @default(false)

  // User (One-to-Many relation)
  user   User   @relation("BookingUser", fields: [userId], references: [id])
  userId String

  // Property (One-to-Many relation)
  property   Property @relation("PropertyBookings", fields: [propertyId], references: [id])
  propertyId String

  // Related conversation
  conversation   Conversation? @relation("BookingConversation")

  @@map("Booking")
}

model Conversation {
  id        String   @id
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime

  // Participants (Many-to-Many relation)
  participants User[] @relation("ConversationParticipants")

  // Related property (if any)
  property   Property? @relation("PropertyConversations", fields: [propertyId], references: [id])
  propertyId String?

  // Related booking (if any)
  booking   Booking? @relation("BookingConversation", fields: [bookingId], references: [id])
  bookingId String?  @unique

  // Messages in this conversation
  messages Message[] @relation("ConversationMessages")

  @@map("Conversation")
}

model Message {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  readAt    DateTime?
  
  // Sender (One-to-Many relation)
  sender   User   @relation("MessageSender", fields: [senderId], references: [id])
  senderId String

  // Conversation (One-to-Many relation)
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  conversationId String

  @@map("Message")
}
